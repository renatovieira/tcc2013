package br.usp.ime.tcc.activities.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.robolectric.Robolectric.shadowOf;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;
import org.robolectric.shadows.ShadowIntent;

import android.content.Intent;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import br.usp.ime.tcc.activities.FilterActivity;
import br.usp.ime.tcc.activities.FilteredImageActivity;
import br.usp.ime.tcc.activities.R;
import br.usp.ime.tcc.activities.components.test.ButtonActionsTest;

@RunWith(RobolectricTestRunner.class)
public class FilteredImageActivityTest {
	private FilteredImageActivity filteredImageActivity;
	private ButtonActionsTest bat;

	private FilteredImageActivity startWithLoadedImage() {
		class FilteredImageActivityForTest extends FilteredImageActivity {
			@Override
			public void onCreate(Bundle savedInstanceState) {
				super.onCreate(savedInstanceState);
				originalBitmap = BitmapFactory.decodeResource(getResources(),
						R.drawable.ic_launcher);
			}
		}
		
		Intent intent = Robolectric
				.buildActivity(FilteredImageActivity.class).create().get().getIntent();
		intent.putExtra("imagePath", "dummy");
		
		filteredImageActivity = new FilteredImageActivityForTest();
		filteredImageActivity.onCreate(null);		
		return Robolectric.buildActivity(FilteredImageActivityForTest.class).withIntent(intent).create().get();
	}

	// Tests
	@Before
	public void setUp() throws Exception {
		filteredImageActivity = startWithLoadedImage();
		bat = new ButtonActionsTest(filteredImageActivity);
	}

	@Test
	public void extrasShouldNotBeNull() {
		assertNotNull(filteredImageActivity.getIntent().getExtras());
	}

	@Test
	public void discardButtonShouldReturnToFilterActivity() {
		Intent startedIntent = bat
				.createButtonAndGetStartedIntentAfterClick(R.id.discard_button);
		ShadowIntent shadowIntent = shadowOf(startedIntent);

		assertNotNull(startedIntent);
		assertEquals(FilterActivity.class.getName(), shadowIntent
				.getComponent().getClassName());
	}

	@Test
	public void saveButtonShouldReturnToFilterActivity() {
		Intent startedIntent = bat
				.createButtonAndGetStartedIntentAfterClick(R.id.save_button);
		ShadowIntent shadowIntent = shadowOf(startedIntent);

		assertNotNull(startedIntent);
		assertEquals(FilterActivity.class.getName(), shadowIntent
				.getComponent().getClassName());
	}
}
