package br.usp.ime.tcc.activities.components.test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;

import android.app.Activity;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.SeekBar;
import br.usp.ime.tcc.activities.FilteredImageActivity;
import br.usp.ime.tcc.activities.R;
import br.usp.ime.tcc.activities.components.ComponentLoader;
import br.usp.ime.tcc.utils.Constants;

@RunWith(RobolectricTestRunner.class)
public class ComponentsLoaderTest {
	private Activity activity;
	private ComponentLoader componentLoader;
	private boolean activated;
	private int defaultButtonId;
	private int defaultImageviewId;
	private int defaultSeekbarId;
	
	private boolean buttonIsResponsive(Button button) {
		return button.performClick();
	}
	
	private OnClickListener createDefaultOnClickListener() {
		OnClickListener listener = new OnClickListener() {
			@Override
			public void onClick(View arg0) {
				activated = true;
			}
		};
		
		return listener;
	}
	
	private Button loadDefaultButton(OnClickListener listener) {
		Button b = componentLoader.loadButton(defaultButtonId, listener);
		return b;
	}
	
	private Button createButtonWithDefaultListener() {
		OnClickListener listener = createDefaultOnClickListener();
		
		Button b = loadDefaultButton(listener);
		return b;
	}
	
	private SeekBar loadDefaultSeekbar(int maximum, int progress) {
		SeekBar bar = componentLoader.loadSeekBar(defaultSeekbarId, 10, 10);
	}
	
	
	//Tests
	
	@Before
	public void setUp() throws Exception {
		activity = Robolectric.buildActivity(FilteredImageActivity.class)
				.create().get();
		
		defaultButtonId = R.id.save_button;
		
		componentLoader = new ComponentLoader(activity);
		
		activated = false;
	}
	
	@Test(expected=NullPointerException.class)
	public void shouldThrowExceptionIfInvalidId()  {
		componentLoader.loadButton(-1, null);
	}
	
	public void buttonShouldNotBeResponsiveWithoutListener() {
		Button b = loadDefaultButton(null);
		
		assertEquals(false, buttonIsResponsive(b));
	}

	@Test
	public void buttonShouldCallRightListener()  {
		Button b = createButtonWithDefaultListener();
		
		b.performClick();
		
		assertTrue(activated);
	}
	
	@Test
	public void imageViewShouldNotBeNull() {
		assertNotNull(filteredImage);
	}

	@Test
	public void seekbarShouldNotBeNull() {
		assertNotNull(intensityBar);
	}

	@Test
	public void seekbarMaximumShouldBeMaxIntensity() {
		assertEquals(Constants.MAX_INTENSITY, intensityBar.getMax());
	}

	@Test
	public void seekbarProgressShouldBeMaxProgress() {
		assertEquals(Constants.PROGRESS, intensityBar.getProgress());
	}
}
