package br.usp.ime.tcc.utils;

import static org.junit.Assert.*;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.doCallRealMethod;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import android.graphics.Bitmap;
import android.os.Environment;

@RunWith(PowerMockRunner.class)
@PrepareForTest({ Bitmap.class, Environment.class })
public class FileSaverTest {
	private FileSaver fileSaver;

	@Before
	public void setUp() throws Exception {
		fileSaver = new FileSaver();
	}

	@Test
	public void saveToFileShouldReturnNullIfNullBitmap() throws IOException {
		assertNull(fileSaver.saveToFile(null));
	}

	@Test
	public void should() throws IOException {
		Bitmap bmp = PowerMockito.mock(Bitmap.class);

		PowerMockito.mockStatic(Environment.class);

		Mockito.when(Static.firstStaticMethod(param)).thenReturn(value);

		FileSaver mockFileSaver = mock(FileSaver.class);
		doCallRealMethod().when(mockFileSaver).saveToFile(bmp);

		OutputStream mockOutputStream = mock(OutputStream.class);
		when(mockFileSaver.createNewOutPutStream(any(File.class))).thenReturn(
				mockOutputStream);

		assertNotNull(fileSaver.saveToFile(bmp));
	}
}
