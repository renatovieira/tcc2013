package br.usp.ime.tcc.filter;

import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import android.graphics.Bitmap;
import android.graphics.Color;

@RunWith(PowerMockRunner.class)
@PrepareForTest(Bitmap.class)
public class FilterTest {
	private static final int DEFAULT_MOCK_BITMAP_WIDTH = 3;
	private static final int DEFAULT_MOCK_BITMAP_HEIGHT = 3;
	private static final int[] DEFAULT_MOCK_BITMAP_VALUES = { 1, 2 };

	private Bitmap defaultMockBitmap;
	private Filter filter;

	Color color;
	
	private Bitmap createMockBitmap(int width, int height, int[] values) {
		defaultMockBitmap = PowerMockito.mock(Bitmap.class);
		when(defaultMockBitmap.getWidth()).thenReturn(width);
		when(defaultMockBitmap.getWidth()).thenReturn(height);
		when(defaultMockBitmap.getConfig()).thenReturn(null);

		return defaultMockBitmap;
	}

	// Tests
	@Before
	public void setUp() throws Exception {
		defaultMockBitmap = createMockBitmap(DEFAULT_MOCK_BITMAP_WIDTH,
				DEFAULT_MOCK_BITMAP_HEIGHT, DEFAULT_MOCK_BITMAP_VALUES);
	}
	
	@Test
	public void filterWithIntensityZeroShouldReturnSameBitmap() {
		assertEquals();
	}

}
