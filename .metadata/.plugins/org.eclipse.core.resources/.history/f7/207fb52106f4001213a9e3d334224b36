package br.usp.ime.tcc.filter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import br.usp.ime.tcc.activities.FilterActivity;
import br.usp.ime.tcc.activities.R;

@RunWith(RobolectricTestRunner.class)
public class FilterTest {
	// Tests
	@Before
	public void setUp() throws Exception {
	}
	
	@Test
	public void filterShouldReturnBitmapWithSameDimensions() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0f); 
		
		assertEquals(defaultBitmap.getWidth(), filteredBitmap.getWidth());
		assertEquals(defaultBitmap.getHeight(), filteredBitmap.getHeight());
	}
	
	@Test
	public void filterShouldReturnNullIfBitmapIsNull() {
		filter = new Filter(0f);

		assertNull(filter.applyTo(null));
	}
	
	@Test
	public void filterShouldReturnSameBitmapWithIntensityIsZero() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0f); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		
		for (int w = 0; w < imageWidth; w++)
			for (int h = 0; h < imageHeight; h++)
				assertEquals(defaultBitmap.getPixel(w, h), filteredBitmap.getPixel(w, h));
	}
}
