package br.usp.ime.tcc.filter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.AdditionalAnswers.returnsFirstArg;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.robolectric.Robolectric;
import org.robolectric.RobolectricTestRunner;

import br.usp.ime.tcc.activities.FilterActivity;
import br.usp.ime.tcc.activities.R;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Color;
import android.test.mock.MockResources;

@RunWith(RobolectricTestRunner.class)
public class FilterTest {
	private Filter filter;
	private Bitmap defaultBitmap;

	private Bitmap createFilterAndGetFilteredBitmap(float intensity) {
		filter = new Filter(intensity);
		
		Bitmap filteredBitmap = filter.applyTo(defaultBitmap);
		return filteredBitmap;
	}

	// Tests
	@Before
	public void setUp() throws Exception {
		FilterActivity activity = Robolectric.buildActivity(FilterActivity.class).create().get();
		
		defaultBitmap = BitmapFactory.decodeResource(, R.drawable.ic_launcher);
	}
	
	@Test
	public void filterShouldReturnBitmapWithSameDimensions() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0f); 
		
		assertEquals(defaultBitmap.getWidth(), filteredBitmap.getWidth());
		assertEquals(defaultBitmap.getHeight(), filteredBitmap.getHeight());
	}
	
	@Test
	public void filterShouldReturnNullIfBitmapIsNull() {
		filter = new Filter(0f);

		assertNull(filter.applyTo(null));
	}
	
	@Test
	public void filterShouldReturnSameBitmapWithIntensityIsZero() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0f); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		
		for (int w = 0; w < imageWidth; w++)
			for (int h = 0; h < imageHeight; h++)
				assertEquals(defaultBitmap.getPixel(w, h), filteredBitmap.getPixel(w, h));
	}
}
