package br.usp.ime.tcc.utils;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;

import android.content.ContentProvider;
import android.content.ContentResolver;
import android.database.Cursor;
import android.net.Uri;

public class UtilsTest {
	private ContentResolver mockContentResolver;
	private String correctPath;
	private Uri mockUri;

	private Cursor mockCursorForUse(String correctPath) {
		Cursor c = mock(Cursor.class);
		when(c.moveToFirst()).thenReturn(true);
		when(c.getColumnIndex(any(String.class))).thenReturn(0);
		when(c.getString(0)).thenReturn(correctPath);
		return c;
	}

	private ContentResolver mockContentResolverForUse(Uri mockUri,
			String correctPath) {
		Cursor mockCursor = mockCursorForUse(correctPath);

		ContentResolver mockContentResolver = mock(ContentResolver.class);

		when(
				mockContentResolver.query(any(Uri.class), any(String[].class),
						any(String.class), any(String[].class),
						any(String.class))).thenReturn(mockCursor);
		return mockContentResolver;
	}

	//Tests
	
	@Before
	public void setUp() throws Exception {
		mockUri = mock(Uri.class);
		ContentProvider mockContentProvider = mock(ContentProvider.class);
		
		mockContentResolver = mockContentResolverForUse(mockUri, correctPath);
	}

	@Test
	public void selectedPicturePathShouldBeNullIfInvalidUri() {
		assertNull(Utils.getSelectedPicturePath(null, mockContentResolver));
	}

	@Test
	public void shouldReturnTheCorrectPath() {
		assertEquals(correctPath,
				Utils.getSelectedPicturePath(mockUri, mockContentResolver));
	}
}
