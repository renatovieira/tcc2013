package br.usp.ime.tcc.utils;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;

import android.content.ContentResolver;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.BitmapFactory.Options;
import android.net.Uri;
import android.provider.MediaStore;

public final class Utils {
	private Utils() {
		throw new AssertionError();
	}

	private static int calculateInSampleSize(Options options,
			int reqWidth, int reqHeight) {
		final int height = options.outHeight;
		final int width = options.outWidth;
		int inSampleSize = 1;

		if (height > reqHeight || width > reqWidth) {
			final int heightRatio = Math.round((float) height
					/ (float) reqHeight);
			final int widthRatio = Math.round((float) width / (float) reqWidth);

			inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
		}
		return inSampleSize;
	}

	private static String queryForPicturePath(Uri selectedImageUri,
			ContentResolver cr) {
		String[] filePathColumn = { MediaStore.Images.Media.DATA };

		Cursor cursor = cr.query(selectedImageUri, filePathColumn, null, null,
				null);
		cursor.moveToFirst();

		int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
		String picturePath = cursor.getString(columnIndex);
		cursor.close();
		return picturePath;
	}

	// Public Methods

	public static String getSelectedPicturePath(Uri selectedImageUri,
			ContentResolver cr) {
		String picturePath = null;

		if (selectedImageUri != null) {
			picturePath = queryForPicturePath(selectedImageUri, cr);
		}
		return picturePath;
	}

	public static String getTimeStamp() {
		String timeStamp = new SimpleDateFormat(Constants.DATE_FORMAT,
				Locale.getDefault()).format(new Date());
		return timeStamp;
	}
	
	public static Bitmap getScaledBitmapFromImagePath(String imagePath) {
		Options options = new Options();
		options.inJustDecodeBounds = true;
		BitmapFactory.decodeFile(imagePath, options);

		options.inSampleSize = calculateInSampleSize(options,
				Constants.REQWIDTH, Constants.REQHEIGHT);
		options.inJustDecodeBounds = false;

		return BitmapFactory.decodeFile(imagePath, options);
	}
	
	public static int getOrientation(ContentResolver cr, Uri photoUri) {
	    Cursor cursor = context.getContentResolver().query(photoUri,
	            new String[] { MediaStore.Images.ImageColumns.ORIENTATION },
	            null, null, null);

	    try {
	        if (cursor.moveToFirst()) {
	            return cursor.getInt(0);
	        } else {
	            return -1;
	        }
	    } finally {
	        cursor.close();
	    }
	}
}
