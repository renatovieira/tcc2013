package br.usp.ime.tcc.filter;

import static org.mockito.Mockito.*;
import static org.junit.Assert.*;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.DeferSupportingClassLoader;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import android.graphics.Bitmap;
import android.graphics.Color;

@RunWith(PowerMockRunner.class)
@PrepareForTest(Bitmap.class)
public class FilterTest {
	private static final int DEFAULT_MOCK_BITMAP_WIDTH = 2;
	private static final int DEFAULT_MOCK_BITMAP_HEIGHT = 2;
	private static final int[][] DEFAULT_MOCK_BITMAP_VALUES = { {Color.BLACK, Color.RED}, { Color.GREEN, Color.BLUE} };

	private Bitmap defaultMockBitmap;
	private Filter filter;

	private Bitmap createMockBitmap(int width, int height, int[][] values) {
		Bitmap bitmap = PowerMockito.mock(Bitmap.class);
		when(bitmap.getWidth()).thenReturn(width);
		when(bitmap.getHeight()).thenReturn(height);
		when(bitmap.getConfig()).thenReturn(null);
		
		for (int w = 0; w < width; w++) 
			for (int h = 0; h < height; h++)
				when(bitmap.getPixel(w, h)).thenReturn(values[w][h]);

		return bitmap;
	}
	
	private Bitmap createFilterAndGetFilteredBitmap(double intensity) {
		filter = new Filter(intensity);
		
		Bitmap filteredBitmap = filter.applyTo(defaultMockBitmap);
		return filteredBitmap;
	}

	// Tests
	@Before
	public void setUp() throws Exception {
		defaultMockBitmap = createMockBitmap(DEFAULT_MOCK_BITMAP_WIDTH,
				DEFAULT_MOCK_BITMAP_HEIGHT, DEFAULT_MOCK_BITMAP_VALUES);
	}
	
	@Test
	public void filterShouldReturnBitmapWithSameDimensions() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0.0); 
		
		assertEquals(defaultMockBitmap.getWidth(), filteredBitmap.getWidth());
		assertEquals(defaultMockBitmap.getHeight(), filteredBitmap.getHeight());
	}
	
	@Test
	public void filterShouldReturnBitmapWithSameDimensions() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0.0); 
		
		assertEquals(defaultMockBitmap.getWidth(), filteredBitmap.getWidth());
		assertEquals(defaultMockBitmap.getHeight(), filteredBitmap.getHeight());
	}
	
	@Test
	public void filterShouldReturnSameBitmapWithIntensityIsZero() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0.0); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		
		for (int w = 0; w < imageWidth; w++)
			for (int h = 0; h < imageHeight; h++)
				assertEquals(defaultMockBitmap.getPixel(w, h), filteredBitmap.getPixel(w, h));
	}
	
	@Test
	public void filterShouldReturnCorrectBitmap() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(1.0); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		int expectedResults[][] = {{Color.BLACK, Color.RED}, {Color.GREEN, Color.GREEN}};
		
		boolean isEqual = true;
		
		for (int w = 0; w < imageWidth; w++) {
			for (int h = 0; h < imageHeight; h++) {
				if (expectedResults[w][h] != filteredBitmap.getPixel(w, h)) {
					isEqual = false;
					break;
				}
			}
		}
		
		assertTrue(isEqual);
	}
}
