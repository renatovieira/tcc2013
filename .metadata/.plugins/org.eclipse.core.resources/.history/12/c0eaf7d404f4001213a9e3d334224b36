package br.usp.ime.tcc.filter;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.AdditionalAnswers.returnsFirstArg;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;
import org.robolectric.RobolectricTestRunner;

import android.graphics.Bitmap;
import android.graphics.Color;

@RunWith(RobolectricTestRunner.class)
public class FilterTest {
	private Filter filter;

	// Tests
	@Test
	public void filterShouldReturnNullIfBitmapIsNull() {
		filter = new Filter(0f);

		assertNull(filter.applyTo(null));
	}
	
	@Test
	public void filterShouldReturnSameBitmapWithIntensityIsZero() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(0f); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		
		for (int w = 0; w < imageWidth; w++)
			for (int h = 0; h < imageHeight; h++)
				assertEquals(defaultMockBitmap.getPixel(w, h), filteredBitmap.getPixel(w, h));
	}
	
	@Test
	public void filterWithIntensityOneShouldReturnCorrectBitmap() {
		Bitmap filteredBitmap = createFilterAndGetFilteredBitmap(1f); 		
		int imageWidth = filteredBitmap.getWidth();
		int imageHeight = filteredBitmap.getHeight();
		int expectedResults[][] = {{Color.BLACK, Color.RED}, {Color.GREEN, Color.GREEN}};
		
		boolean isEqual = true;
		
		for (int w = 0; w < imageWidth; w++) {
			for (int h = 0; h < imageHeight; h++) {
				if (expectedResults[w][h] != filteredBitmap.getPixel(w, h)) {
					isEqual = false;
					break;
				}
			}
		}
		
		assertTrue(isEqual);
	}
}
